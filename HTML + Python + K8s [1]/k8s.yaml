apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS hotel_db;
    GRANT ALL PRIVILEGES ON hotel_db.* TO 'admin'@'%';

    USE hotel_db;

    CREATE TABLE IF NOT EXISTS hotel (
      hotel_id INT AUTO_INCREMENT PRIMARY KEY,
        hotel_name VARCHAR(255) NOT NULL,
        hotel_location VARCHAR(255) NOT NULL
    );

    INSERT INTO hotel (hotel_id, hotel_name, hotel_location)
    VALUES
    (1, 'Grand Plaza', 'USA'),
    (2, 'Marina Bay Sands', 'Singapore'),
    (3, 'Sakura Palace Hotel', 'Japan'),
    (4, 'Mandarin Palace', 'China');

    CREATE DATABASE IF NOT EXISTS room_db;
    GRANT ALL PRIVILEGES ON room_db.* TO 'admin'@'%';

    USE room_db;

    CREATE TABLE IF NOT EXISTS room (
      room_id INT AUTO_INCREMENT PRIMARY KEY,
        hotel_id INT NOT NULL,
        hotel_name VARCHAR(255) NOT NULL,
        room_number INT NOT NULL,
        room_size INT NOT NULL,
        room_vacancy VARCHAR(20) NOT NULL
    );

    INSERT INTO room (room_id, hotel_id, hotel_name, room_number, room_size, room_vacancy)
    VALUES
    (11, 1, 'Grand Plaza', 1011, 2, 'VACANT'),
    (12, 1, 'Grand Plaza', 1012, 4, 'VACANT'),
    (1000, 2, 'Marina Bay Sands', 1000, 4, 'OCCUPIED'),
    (1001, 2, 'Marina Bay Sands', 1001, 4, 'VACANT'),
    (3001, 3, 'Sakura Palace Hotel', 3001, 4, 'OCCUPIED'),
    (3011, 3, 'Sakura Palace Hotel', 3011, 2, 'VACANT'),
    (5002, 4, 'Mandarin Palace', 5002, 2, 'VACANT'),
    (5008, 4, 'Mandarin Palace', 5008, 2, 'VACANT');

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        env:
        - name: MYSQL_USER
          value: "admin"
        - name: MYSQL_PASSWORD
          value: "admin"
        - name: MYSQL_ROOT_PASSWORD
          value: "admin"
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-init-script
        configMap:
          name: mysql-init-script

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotel-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hotel
  template:
    metadata:
      labels:
        app: hotel
    spec:
      containers:
      - name: hotel
        image: sunzi/hotel:1.0 # rename if necessary
        imagePullPolicy: Never # Not pulling from Docker Hub
        ports:
        - containerPort: 5001
        env:
        - name: HOTEL_DB_URL
          value: "mysql+mysqlconnector://admin:admin@mysql-service:3306/hotel_db"

---
apiVersion: v1
kind: Service
metadata:
  name: hotel-service
spec:
  selector:
    app: hotel
  ports:
    - protocol: TCP
      port: 5001 # Exposed port
      targetPort: 5001 # Port application is listening on
  type: LoadBalancer # Use minikube tunnel to expose to localhost

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: room-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: room
  template:
    metadata:
      labels:
        app: room
    spec:
      containers:
      - name: room
        image: sunzi/room:1.0 # rename if necessary
        imagePullPolicy: Never # Not pulling from Docker Hub
        ports:
        - containerPort: 5002
        env:
        - name: ROOM_DB_URL
          value: "mysql+mysqlconnector://admin:admin@mysql-service:3306/room_db"

---
apiVersion: v1
kind: Service
metadata:
  name: room-service
spec:
  selector:
    app: room
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5002
  type: LoadBalancer
